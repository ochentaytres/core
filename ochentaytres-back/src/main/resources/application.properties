################################################################################
#Â General
################################################################################
application.version=1.0.1

################################################################################
#Springboot
################################################################################
#server.port (default 8080)
server.port = 8013

################################################################################
# Logging
################################################################################

logging.file = ochentaytres.log
# Level for loggers on classes inside the root package "es.lunatictrading" (and its 
# sub-packages). 
# Available levels are: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
#logging.level = WARN
#logging.level.io.ochentaytres = INFO

logging.level = TRACE
logging.level.io.ochentaytres = TRACE

# https://stackoverflow.com/questions/35552647/how-to-include-date-in-log-files-name-with-spring-boot-slf4j
#    To configure the more fine-grained settings of a logging system you need to use the native configuration format supported by the LoggingSystem in question. By default Spring Boot picks up the native configuration from its default location for the system (e.g. classpath:logback.xml for Logback), but you can set the location of the config file using the "logging.config" property.
#
#    If default is ok for you just create logback.xml and add corresponding file appender, e.g.
#
#    <appender name="rollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
#      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
#        <FileNamePattern>LogFile.%d{yyyy-MM-dd}.log</FileNamePattern>
#        <MaxHistory>30</MaxHistory>
#      </rollingPolicy>
#      <encoder>
#        <pattern>%d %-5level [%thread] %logger{0}: %msg%n</pattern>
#      </encoder>
#    </appender>

################################################################################
# DATABASE
################################################################################
# H2 (test database, non persistent)
spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
# To making data non volatile, using file:
# spring.datasource.url=jdbc:h2:file:./data/testDatabase
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=p
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Data Definition Language (DDL) actions on database
# create: creates all schema data (removing existing first)
# update: updates schema data, adding or removing changes from existing elements
hibernate.hbm2ddl.auto=update
#hibernate.hbm2ddl.auto=create
hibernate.dialect=org.hibernate.dialect.H2Dialect
hibernate.current_session_context_class=thread
spring.h2.console.enabled=true
# Mysql
